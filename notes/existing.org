# -*- mode: org; org-confirm-babel-evaluate: nil; coding: utf-8 -*-
#+OPTIONS: org-confirm-babel-evaluate:nil
# Created 2020-10-19 Mon 14:11
#+TITLE: 
#+AUTHOR: Michael Hohn
#+LANGUAGE:  en
#+TEXT:      
#+OPTIONS: ^:{} H:2 num:t \n:nil @:t ::t |:t ^:nil f:t *:t TeX:t LaTeX:t skip:nil p:nil
#+OPTIONS: toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./l3style.css"/>
#+HTML: <div id="toc">
#+TOC: headlines 2        insert TOC here, with two headline levels
#+HTML: </div> 
# 
#+HTML: <div id="org-content">

* Existing workshops in single large repository
  The repository https://github.com/advanced-security/codeql-workshops-staging has
  a collection of workshops.  Some of them have been separated out below for
  better usability.

* Existing workshops in separate repositories
** TODO SCURVY: Untangle this
   - [ ] This is mixing actual workshops that are based on learning objectives
     with
   - [ ] an imaginary structure of school-style classes.

   First identify the learning paths, then their (common?) components. 

** TODO Use vs. learning
   Some modules are prerequisites for a workshop, so they are /used/ but /not taught/.
** TODO Paths for new workshops
   - [ ] Paths for new workshops, with different node shapes.
   - [X] "Reinforces" entries for paths?  Same as prerequisites.
   - [X] focus on C
   - [ ] parallel edges for paths?
   - [ ] Parallel graphs for other languages.
   - [ ] Feedback

** Common
   #+BEGIN_SRC python :results value pp :session main :exports both :python ipython
     import networkx as nx

     import scurvy as sc

     G = nx.MultiDiGraph()
     Gt = nx.DiGraph()

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9,
                        'stylesheet': 'graphstyle.css',
                        }
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12,
                        }

     G.graph['graph']={'rankdir':'TD', 'fontsize':9,
                        'stylesheet': 'graphstyle.css',
                        }
     G.graph['node']={'shape':'rect', 'fontsize':12}
     G.graph['edges']={'arrowsize':'4.0', 'fontsize':12, 'penwidth':6, 'stroke-width':6,
                        'stylesheet': 'graphstyle.css',
                        }                  

     # Add whole path, nodes and edges.
     colnum = 0
     def add_path(*path):
         global colnum
         # # serial path
         # for ndi in range(0, len(path)-1):
         #     Gt.add_node(path[ndi])
         #     Gt.add_edge(path[ndi], path[ndi+1], color=sc.colors2[colnum])
         #     G.add_node(path[ndi])
         #     G.add_edge(path[ndi], path[ndi+1], color=sc.colors2[colnum])
         # Gt.add_node(path[ndi+1])
         # G.add_node(path[ndi+1])
         # 
         # Parallel paths
         G.add_node(path[0])
         Gt.add_node(path[0])
         pend = len(path)-1
         for ndi in range(1, pend):
             Gt.add_node(path[ndi])
             Gt.add_edge(path[0], path[ndi], color=sc.colors2[colnum])
             Gt.add_edge(path[ndi], path[pend], color=sc.colors2[colnum])
             G.add_node(path[ndi])
             G.add_edge(path[0], path[ndi], color=sc.colors2[colnum])
             G.add_edge(path[ndi], path[pend], color=sc.colors2[colnum])
         colnum += 1

     def add_prereqs(item, *prereqs):
         global colnum
         for ndi in range(0, len(prereqs)):
             Gt.add_node(prereqs[ndi])
             Gt.add_edge(prereqs[ndi], item, color=sc.colors2[colnum])
             G.add_node(prereqs[ndi])
             G.add_edge(prereqs[ndi], item, color=sc.colors2[colnum])

     def draw(graph, filename):
         svg = nx.nx_agraph.to_agraph(graph).draw(prog='dot', format='svg')
         with open(filename, 'wb') as f:
             # f.write(svg.decode())
             f.write(svg)
         return(filename)

     # add_prereqs(
     #     "test-start-100",
     #     "test-pre-99",
     #     "test-pre-89",
     # )

     # add_path(
     #     "test-start-100",
     #     "test-a-100",
     #     "test-b-100",
     #     "test-goal-100",
     # )

     # draw(G, 'g001.svg')

     'ok'
   #+END_SRC

   #+RESULTS:
   : 'ok'

** https://github.com/hohn/codeql-dataflow-sql-injection
   Data Flow Intro, SQL Injection, C

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     add_prereqs(
         "c-start-100",
     )

     add_path(
         "c-start-100",
         "c-ast-100",
         "c-df-global-100",
         "cli-build-100",
         "cli-build-300",
         "cli-sarif-300",
         "ql-classes-100",
         "ql-predicates-100",        # XX: not yet
         "ql-exists-100",            # XX: not yet
         "ql-select-100",
         "c-goal-100",
     )

     draw(G, 'g001.svg')
   #+END_SRC

   #+RESULTS:
   [[file:g001.svg]]

** https://github.com/advanced-security/codeql-workshops-staging/blob/master/cpp/introduction/session-3/codeql-workshop-cpp-global-data-flow.md

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-110",
         "c-ast-100",
         "c-df-local-100",
         "c-taint-local-100",
     )

     add_path(
         "c-start-110",
         "c-taint-global-100",
         "c-lib-security-100",
         "c-df-global-100",
         "c-goal-110",
     )

     draw(Gt, "g010.svg")
   #+END_SRC

   #+RESULTS:
   [[file:g010.svg]]

   LDF-103: Dataflow I

** https://github.com/advanced-security/codeql-workshops-staging/tree/master/cpp/introduction/session-2

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-120",
         "c-ast-100",
     )

     add_path(
         "c-start-120",
         "c-df-local-100",
         "c-taint-local-100",
         "c-goal-120",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "g020.svg")
   #+END_SRC

   #+RESULTS:
   [[file:g020.svg]]

# ** https://github.com/hohn/codeql-dataflow-i-cpp
#    LDF-103: Dataflow I

#    This workshop will provide:

#    - Further experience writing real world queries
#    - Exploration of local data flow
#    - Exploration of local taint tracking
#    - Exploration of global data flow   

#    #+BEGIN_SRC python :results file :session main :exports both :python ipython
#      Gt = nx.DiGraph()

#      add_prereqs(
#          "c-start-130",

#      )

#      add_path(
#          "c-start-130",
#          "c-ast-100",
#          "c-df-local-100",
#          "c-taint-local-100",
#          "c-lib-format-100",
#          "c-df-global-100",
#          "c-goal-130",
#      )

#      # Set defaults
#      Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
#      Gt.graph['node']={'shape':'rect', 'fontsize':12}
#      Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

#      draw(Gt, "g030.svg")
#    #+END_SRC

#    #+RESULTS:
#    [[file:g030.svg]]

** https://github.com/rvermeulen/codeql-workshop-control-flow-cpp

   In this workshop we will explore control flow, how it is represented by the
   standard library, and how you can use it to reason about reachability.

   The workshop is split into multiple exercises introducing control flow. In
   these exercises you will learn:

   - About control flow and the control flow graph (CFG).
   - How control flow is represented in QL.
   - Learn about reachability and how you can answer reachability questions using
     recursive predicates and transitive closures.
   - About properties of control flow graph nodes, such as dominating other
     control flow nodes.
   - About corner-cases when reasoning using control flow, how data flow provides
     higher level construct to answer reachability questions, but still requires
     control flow to excludes correct cases.
   
   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-140",
         "c-df-global-100",
         "c-df-local-100",
     )

     add_path(
         "c-start-140",
         "c-cfg-100",
         "ql-recursion-100",
         "ql-dominators-100",
         "ql-choices-100",
         "c-goal-140",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cg140.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cg140.svg]]

** fork https://github.com/hohn/codeql-workshop-control-flow-cpp

** https://github.com/rvermeulen/codeql-workshop-elements-of-syntactical-program-analysis-cpp
   codeql workshop elements of syntactical program analysis cpp

   In this workshop you will learn how to describe syntactical elements of the
   C/C++ programming language. With the goal of describing the user-mode entry
   point of the intentionally vulnerable Linux driver you will:

   - Discover how QL represents C/C++ program elements.
   - Learn to query program elements.
   - Learn how to encapsulate descriptions of program elements using QL classes.

   This workshop focusses on the syntactical parts. Some parts in this workshop can be generalized using more advanced techniques, such as dataflow analysis, that are covered in other workshops.

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-150",
     )

     add_path(
         "c-start-150",
         "ql-modules-100",
         "ql-classes-100",
         "c-ast-100",
         "c-goal-150",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cg150.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cg150.svg]]

** https://github.com/rvermeulen/codeql-workshop-dataflow-2-cpp

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-160",
         "c-df-global-100",
         "c-df-local-100",
     )

     add_path(
         "c-start-160",
         "c-guards-300",
         "ql-modules-100",
         "c-df-partial_path_graph-300",
         "c-goal-160",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cg160.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cg160.svg]]

** https://github.com/kraiouchkine/codeql-workshop-dataflow-c
   Workshop Title: LDF-203: Dataflow II

   - Modules in this workshop:
     - Customizing the Dataflow Graph,
     - Barrier Guards,
     - Combining Dataflow and Control Flow

   This workshop consists of the following three parts, which can be followed in
   sequence or individually:

   - Basic control-flow and data-flow analysis using local and global data-flow to
     identify flow from input parameters to unvalidated use. (Beginner)
   - Identifying mismatched type validation, debugging data-flow by using partial
     flow analysis, and adding missing flow steps. (Intermediate)
   - Further improving the query by using flow-state and runtime value
     analysis. (Advanced, WIP)

   Understanding
   1. basic syntactic program analysis and
   2. control-flow analysis
   is a prerequisite to this workshop. If you are not familiar with these
   concepts, we recommend that you complete CodeQL Workshop: Syntactical Elements
   of C/C++ and CodeQL Workshop for C/C++: Control Flow first. We recommend that
   you are familiar with the CodeQL language, the CodeQL standard libraries, and
   data-flow analysis at an elementary level.

   [[*https://github.com/rvermeulen/codeql-workshop-elements-of-syntactical-program-analysis-cpp][https://github.com/rvermeulen/codeql-workshop-elements-of-syntactical-program-analysis-cpp]]
   and
   [[*https://github.com/rvermeulen/codeql-workshop-control-flow-cpp][https://github.com/rvermeulen/codeql-workshop-control-flow-cpp]]

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-170",
         "ql-modules-100",
         "ql-classes-100",
         "c-ast-100",
         "c-cfg-100",
         "ql-recursion-100",
         "ql-dominators-100",
         "ql-choices-100",

         "ql-predicates-100",
         "c-df-local-100",
         "c-df-global-100", 
     )

     add_path(
         "c-start-170",
         "c-guards-300",
         "c-goal-170",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cg170.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cg170.svg]]

** https://github.com/kraiouchkine/codeql-workshop-runtime-values-c

   Reasoning about runtime values C/C++

   LDF-204: Reasoning about Runtime Values
   - Modules in this workshop:
     - Global Value Numbering
     - Range Analysis
     - HashCons

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-380",
         "c-ast-100",
         "c-df-local-100",
         "ql-exists-100",
         "ql-predicates-100",
         "ql-classes-100",
         "c-cfg-100",
         "c-df-global-100", 
     )

     add_path(
         "c-start-380",
         "ql-casts-100",
         "ql-named_select-100",
         "c-guards-300",
         "c-lib-SimpleRangeAnalysis-300",
         "c-lib-GlobalValueNumbering-300",
         "c-lib-HashCons-300",
         "c-types-300",
         "c-goal-380",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cg380.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cg380.svg]]

** fork: https://github.com/hohn/codeql-workshop-runtime-values-c
   LDF-204: Reasoning about Runtime Values
   - Modules in this workshop:
     - Global Value Numbering
     - Range Analysis
     - HashCons

** https://github.com/kraiouchkine/codeql-workshop-dangling-pointers-c

** fork: https://github.com/hohn/codeql-workshop-dangling-pointers-c


   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-390",
         "c-ast-100",
         "ql-predicates-100",
         "ql-classes-100",
         "ql-exists-100",
     )

     add_path(
         "c-start-390",
         "ql-adts-300",
         "c-ast-200",
         "ql-adt_subclasses-300",
         "ql-predicates-300",
         "c-goal-390",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cg390.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cg390.svg]]

** https://github.com/rvermeulen/codeql-workshop-vulnerable-linux-driver
   Workshop Title: LDF-203: Dataflow II
   - Modules in this workshop:
     - Customizing the Dataflow Graph,
     - Barrier Guards,
     - Combining Dataflow and Control Flow

   A user-controlled size argument can lead to a buffer overflow.

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-400",
         "c-ast-100",
         "c-df-global-100",
         "c-df-local-100",
         "ql-casts-100",
         "ql-modules-100",
         "ql-predicates-100",
         "ql-classes-100",
         "ql-exists-100",
     )

     add_path(
         "c-start-400",
         "c-df-global-200",
         "ql-modules-200",
         "ql-star-200",
         "ql-plus-200",
         "c-guards-290",
         "c-goal-400",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cg400.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cg400.svg]]

** https://github.com/knewbury01/codeql-workshop-integer-conversion.git
   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "c-start-210",
         "c-ast-100",
         "c-df-local-100",
         "ql-predicates-100",
         "ql-classes-100",
         "ql-select-100",
     )

     add_path(
         "c-start-210",
         "c-types-200",
         "ql-casts-110",
         "c-goal-210",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cg210.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cg210.svg]]

** fork: https://github.com/hohn/codeql-workshop-integer-conversion.git
** Together
   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     G2 = G.copy()
     nodes = G2.nodes()
     for nd in nodes:
         if "-start-" in nd:
             nodes[nd]['shape'] = 'invhouse'
         if "-goal-" in nd:
             nodes[nd]['shape'] = 'house'

     draw(G2, "gall.svg")
   #+END_SRC

   #+RESULTS:
   [[file:gall.svg]]

** Checkpoints
   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     def add_checkpoint(name, *entrypoints):
         global Gt, G
         for graph in [Gt, G]:
             graph.add_node(name, style='filled', fillcolor="lightblue", shape="oval")
             for ep in entrypoints:
                 graph.add_edge(name, ep, color='black', penwidth=3)

     def into_checkpoint(name, *entrypoints):
         global colnum
         global Gt, G
         for graph in [Gt, G]:
             graph.add_node(name, style='filled', fillcolor="lightblue", shape="oval")
             for ep in entrypoints:
                 graph.add_edge(ep, name, color=sc.colors2[colnum], penwidth=3)
         colnum += 1

     # add_checkpoint(
     #     "all-beginner",
     #     "c-start-100",
     #     "c-start-150"
     # )

     add_checkpoint(
         "cp-beginner",
         "c-start-100",
         "c-start-150"
     )

     into_checkpoint(
         "cp-ql-customizer",
         "c-taint-local-100",
         "c-df-local-100",
         "c-ast-100",
         "c-df-global-100",
         "c-taint-global-100",
         "ql-modules-100",
         "c-lib-security-100",
     )

     # Using all the previous dependencies
     # 
     # into_checkpoint(
     #     "cp-ql-writer",
     #     # All the previous dependencies
     #     "c-taint-local-100",
     #     "c-df-local-100",
     #     "c-ast-100",
     #     "c-df-global-100",
     #     "c-taint-global-100",
     #     # plus some more
     #     "c-lib-security-100",
     #     "c-cfg-100",
     #     "ql-recursion-100",
     #     "ql-predicates-100",
     #     "ql-classes-100",
     #     "ql-exists-100",
     #     "ql-select-100",
     # )

     into_checkpoint(
         "cp-ql-writer-100",
         # All the previous checkpoints
         "cp-ql-customizer",
         # plus some more
         "c-cfg-100",
         "ql-recursion-100",
         "ql-predicates-100",
         "ql-classes-100",
         "ql-exists-100",
         "ql-select-100",
     )

     into_checkpoint(
         "cp-ql-writer-200",
         # All the previous checkpoints
         "cp-ql-writer-100",
         # plus some more
         "ql-choices-100",
         "ql-dominators-100",
         "c-goal-400",
     )

     # XX: more checkpoints

     # Gt.add_node("all-beginner", style='filled', fillcolor="lightblue", shape="oval")
     # Gt.add_node("cp-beginner", style='filled', fillcolor="lightblue", shape="oval")

     # Gt.add_edge("all-beginner", "c-start-100", color='black', penwidth=3)
     # Gt.add_edge("all-beginner", "c-start-150", color='black', penwidth=3)
     # Gt.add_edge("cp-beginner", "c-start-100", color='black', penwidth=3)
     # Gt.add_edge("cp-beginner", "c-start-150", color='black', penwidth=3)

     # G.add_node("all-beginner", style='filled', fillcolor="lightblue", shape="oval")
     # G.add_node("cp-beginner", style='filled', fillcolor="lightblue", shape="oval")

     # G.add_edge("all-beginner", "c-start-100", color='black', penwidth=3)
     # G.add_edge("all-beginner", "c-start-150", color='black', penwidth=3)
     # G.add_edge("cp-beginner", "c-start-100", color='black', penwidth=3)
     # G.add_edge("cp-beginner", "c-start-150", color='black', penwidth=3)

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "cp-beginner.svg")
   #+END_SRC

   #+RESULTS:
   [[file:cp-beginner.svg]]

** Together with Checkpoints
   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     G2 = G.copy()
     nodes = G2.nodes()
     for nd in nodes:
         if "-start-" in nd:
             nodes[nd]['shape'] = 'invhouse'
         if "-goal-" in nd:
             nodes[nd]['shape'] = 'house'

     draw(G2, "gallcp.svg")
   #+END_SRC

   #+RESULTS:
   [[file:gallcp.svg]]

** More compact detail nodes
   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     G3 = G.copy()
     nodes = G3.nodes()
     for nd in nodes:
         if "-start-" in nd:
             nodes[nd]['shape'] = 'invhouse'
         if "-goal-" in nd:
             nodes[nd]['shape'] = 'house'
         # De-emphasize the content description nodes
         if nd.startswith("c-") or nd.startswith("ql-"):
             if not ("-goal-" in nd or "-start-" in nd):
                     nodes[nd]['shape'] = 'plain'
                     nodes[nd]['width'] = '0.020'

   #+END_SRC

   #+RESULTS:
   [[file:]]

** Checkpoint dependencies moved to workshop ends
   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     # Manually manipulate to get started
     G3.remove_edge("ql-choices-100", 
                    "cp-ql-writer-200",
                   )
     G3.remove_edge("ql-dominators-100", 
                    "cp-ql-writer-200",
                   )
     G3.add_edge("c-goal-140", "cp-ql-writer-200" , color='black', penwidth=3)

     def drop_edges(target, *sources):
         for src in sources:
             G3.remove_edge(src, target)

     drop_edges(
         "cp-ql-writer-100",
         "ql-predicates-100",
         "ql-select-100",
         "ql-exists-100",
     )
     G3.add_edge(
         "c-goal-100",
         "cp-ql-writer-200",
         color='black', penwidth=3)
     #
     drop_edges(
         "cp-ql-writer-100",
         "ql-classes-100",
     )
     # G3.add_edge(
     #     "c-goal-100",
     #     "cp-ql-writer-200",
     #     color='black', penwidth=3)

     draw(G3, "gallcpc.svg")

   #+END_SRC

   #+RESULTS:
   [[file:]]


** Remove the content description nodes
   Best done by not adding them in the first place -- use a new graph?
** Substitute workshop nodes for start/goal nodes
   Re-attach the out edges from goal nodes to workshop nodes.
** Get checkpoint descriptions
   Use the union of workshops' content nodes to get goal descriptions, and the
   checkpoint descriptions from those.
* Other than C/C++
** GHAS config
   https://github.com/knewbury01/WebGoat
   https://github.com/knewbury01/log4j-shell-poc

** CLI / VS Code                                                        :IDE:
   - https://github.com/knewbury01/codeql-cli-vscode-setup
   - original: https://github.com/hohn/codeql-cli-vscode-setup

** Sample Project Layout                                      :cli:project:
   - https://gist.github.com/hohn/e86d691100e84e6f9a7e96162e0f3c42 (simple and
     intermediate) and
   - https://github.com/rvermeulen/codeql-example-project-layout (comprehensive)
     are starting points and have been used in various projects

** Pack vs. Bundles                                       :admin:integration:
   - bundles include packs and library -- just like the public ones.
   - https://github.com/advanced-security-demo/codeql-bundle-demo/releases/tag/codeql-bundle-20221211
   - https://github.com/advanced-security-demo/codeql-bundle-demo/actions/workflows/bundle.yaml

** https://github.com/hohn/codeql-cli-end-to-end :CLI:bundle:admin:integration:

** https://github.com/rvermeulen/codeql-bundle                     :bundle:
    

** https://github.com/knewbury01/codeql-workshop-nekohtml              :java:

** https://github.com/rvermeulen/codeql-workshop-points-to-java        :java:
   To be refined...

   Elements of Syntactical Program Analysis for Java

** CodeQL workshop for Java: Finding a SQL injection  :java:sql:cve:advanced:
   https://github.com/rvermeulen/codeql-workshop-cve-2021-21380 

** https://github.com/advanced-security/codeql-workshops-staging/blob/master/java/codeql-java-workshop-sqlinjection.md

   #+BEGIN_SRC python :results file :session main :exports both :python ipython
     Gt = nx.DiGraph()

     add_prereqs(
         "java-start-100",
     )

     add_path(
         "java-start-100",
         "java-ast-100",
         "java-df-local-100",
         "java-df-global-100",
         "java-goal-110",
     )

     # Set defaults
     Gt.graph['graph']={'rankdir':'TD', 'fontsize':9}
     Gt.graph['node']={'shape':'rect', 'fontsize':12}
     Gt.graph['edges']={'arrowsize':'4.0', 'fontsize':12}

     draw(Gt, "jg010.svg")
   #+END_SRC

   #+RESULTS:
   [[file:jg010.svg]]

** https://github.com/hohn/codeql-java-workshop-sqlinjection-owasp :java:sql:
   
** Vulnerable Linux Driver                           :advanced:special_topic:
   A user-controlled size argument can lead to a buffer overflow.
   https://github.com/rvermeulen/codeql-workshop-vulnerable-linux-driver

** CodeQL cve 2022 35737                                         :C:cve:custom:
   https://github.com/rvermeulen/codeql-cve-2022-35737

** https://github.com/rvermeulen/apache-struts-cve-2017-9805 :java:cve:custom:

** https://github.com/hohn/codeql-dataflow-ii-java

** https://github.com/rvermeulen/codeql-workshop-introduction-to-javascript :javascript:

   CodeQL: introduction to javascript.  Old workshop, originally written by @hohn,
   now revised.

** codeql workshop control flow java
   https://github.com/rvermeulen/codeql-workshop-control-flow-java

** https://github.com/rvermeulen/codeql-workshop-dataflow-2-java


#+HTML: </div> 
